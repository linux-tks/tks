// This code was autogenerated with `dbus-codegen-rust -r`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_crossroads as crossroads;

pub trait OrgFreedesktopSecretPrompt {
    fn prompt(&mut self, window_id: String) -> Result<(), dbus::MethodErr>;
    fn dismiss(&mut self) -> Result<(), dbus::MethodErr>;
}

#[derive(Debug)]
pub struct OrgFreedesktopSecretPromptCompleted {
    pub dismissed: bool,
    pub result: arg::Variant<Box<dyn arg::RefArg + 'static>>,
}

impl arg::AppendAll for OrgFreedesktopSecretPromptCompleted {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.dismissed, i);
        arg::RefArg::append(&self.result, i);
    }
}

impl arg::ReadAll for OrgFreedesktopSecretPromptCompleted {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopSecretPromptCompleted {
            dismissed: i.read()?,
            result: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopSecretPromptCompleted {
    const NAME: &'static str = "Completed";
    const INTERFACE: &'static str = "org.freedesktop.Secret.Prompt";
}

pub fn register_org_freedesktop_secret_prompt<T>(
    cr: &mut crossroads::Crossroads,
) -> crossroads::IfaceToken<T>
where
    T: OrgFreedesktopSecretPrompt + Send + 'static,
{
    cr.register("org.freedesktop.Secret.Prompt", |b| {
        b.signal::<(bool, arg::Variant<Box<dyn arg::RefArg + 'static>>), _>(
            "Completed",
            ("dismissed", "result"),
        );
        b.method(
            "Prompt",
            ("window_id",),
            (),
            |_, t: &mut T, (window_id,)| t.prompt(window_id),
        );
        b.method("Dismiss", (), (), |_, t: &mut T, ()| t.dismiss());
    })
}
