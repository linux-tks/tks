// This code was autogenerated with `dbus-codegen-rust -r`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_crossroads as crossroads;
use dbus_crossroads::Context;

pub trait OrgFreedesktopSecretItem {
    fn delete(&mut self) -> Result<dbus::Path<'static>, dbus::MethodErr>;
    fn get_secret(&mut self, session: dbus::Path<'static>, ctx: &mut Context) -> Result<(dbus::Path<'static>, Vec<u8>, Vec<u8>, String), dbus::MethodErr>;
    fn set_secret(&mut self, secret: (dbus::Path<'static>, Vec<u8>, Vec<u8>, String), ctx: &mut Context) -> Result<(), dbus::MethodErr>;
    fn locked(&self) -> Result<bool, dbus::MethodErr>;
    fn attributes(&self) -> Result<::std::collections::HashMap<String, String>, dbus::MethodErr>;
    fn set_attributes(&self, value: ::std::collections::HashMap<String, String>) -> Result<(), dbus::MethodErr>;
    fn label(&self) -> Result<String, dbus::MethodErr>;
    fn set_label(&self, value: String) -> Result<(), dbus::MethodErr>;
    fn type_(&self) -> Result<String, dbus::MethodErr>;
    fn set_type(&self, value: String) -> Result<(), dbus::MethodErr>;
    fn created(&self) -> Result<u64, dbus::MethodErr>;
    fn modified(&self) -> Result<u64, dbus::MethodErr>;
}

pub fn register_org_freedesktop_secret_item<T>(cr: &mut crossroads::Crossroads) -> crossroads::IfaceToken<T>
where T: OrgFreedesktopSecretItem + Send + 'static
{
    cr.register("org.freedesktop.Secret.Item", |b| {
        b.method("Delete", (), ("Prompt",), |_, t: &mut T, ()| {
            t.delete()
                .map(|x| (x,))
        });
        b.method("GetSecret", ("session",), ("secret",), |ctx, t: &mut T, (session,)| {
            t.get_secret(session,ctx)
                .map(|x| (x,))
        })
            .annotate("org.qtproject.QtDBus.QtTypeName.Out0", "FreedesktopSecret");
        b.method("SetSecret", ("secret",), (), |ctx, t: &mut T, (secret,)| {
            t.set_secret(secret,ctx)
        })
            .annotate("org.qtproject.QtDBus.QtTypeName.In0", "FreedesktopSecret");
        b.property::<bool, _>("Locked")
            .get(|_, t| t.locked());
        b.property::<::std::collections::HashMap<String, String>, _>("Attributes")
            .get(|_, t| t.attributes())
            .set(|_, t, value| t.set_attributes(value).map(|_| None))
            .annotate("org.qtproject.QtDBus.QtTypeName", "StrStrMap");
        b.property::<String, _>("Label")
            .get(|_, t| t.label())
            .set(|_, t, value| t.set_label(value).map(|_| None));
        b.property::<String, _>("Type")
            .get(|_, t| t.type_())
            .set(|_, t, value| t.set_type(value).map(|_| None));
        b.property::<u64, _>("Created")
            .get(|_, t| t.created());
        b.property::<u64, _>("Modified")
            .get(|_, t| t.modified());
    })
}
